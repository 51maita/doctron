package main

import (
	"context"
	"errors"
	"github.com/lampnick/doctron/converter/doctron_core"
	"github.com/lampnick/doctron/uploader"
	"log"
)

var (
	ErrConvertTimeout = errors.New("convert timed output")
)

type Worker struct {
	id int
}

func InitWorkers(maxWorkers, maxQueue int) chan<- Work {
	workQueue := make(chan Work, maxQueue)

	for i := 0; i < maxWorkers; i++ {
		w := Worker{i}
		go func(workQueue <-chan Work, worker Worker) {
			for work := range workQueue {
				log.Printf("[Worker #%d] processing convert job (pending conversions: %d)\n", worker.id, len(workQueue))
				work.Process()
			}
		}(workQueue, w)
	}

	return workQueue
}

type Work struct {
	ctx             context.Context
	doctron         doctron_core.DoctronI
	doctronUploader uploader.DoctronUploaderI
	output          chan []byte
	err             chan error
	uploadedUrl     chan string
	done            chan struct{}
}

func NewWork(ctx context.Context, wq chan<- Work, d doctron_core.DoctronI, du uploader.DoctronUploaderI) Work {
	w := Work{}
	w.ctx = ctx
	w.doctron = d
	w.doctronUploader = du
	w.output = make(chan []byte, 1)
	w.err = make(chan error, 1)
	w.uploadedUrl = make(chan string, 1)
	w.done = make(chan struct{}, 1)
	go func(wq chan<- Work, w Work) {
		wq <- w
	}(wq, w)
	return w
}

func (w *Work) Process() {
	go func(w *Work) {
		defer close(w.done)
		output, err := w.doctron.Convert()
		if err != nil {
			w.err <- err
			return
		}
		w.output <- output
		url, err := w.doctronUploader.Upload()
		//no need to upload,return output
		if errors.Is(err, uploader.ErrNoNeedToUpload) {
			return
		}
		if err != nil {
			w.err <- err
			return
		}
		if url != "" {
			w.uploadedUrl <- url
			return
		}
	}(w)
}

// Success returns a channel that will be used for publishing the output of a
// convert.
func (w *Work) Success() <-chan struct{} {
	return w.done
}

// Error returns a channel that will be used for publishing errors from a
// convert.
func (w *Work) Error() <-chan error {
	return w.err
}

// Cancel will close the done channel. This will indicate to child Goroutines
// that the job has been terminated, and the results are no longer needed.
func (w *Work) Cancel() {
	w.ctx.Done()
}

// Cancelled returns a channel that will indicate when a job has been completed.
func (w *Work) Cancelled() <-chan struct{} {
	return w.done
}
func (w *Work) GetOutput() <-chan []byte {
	return w.output
}

func (w *Work) GetUploadedUrl() <-chan string {
	return w.uploadedUrl
}
